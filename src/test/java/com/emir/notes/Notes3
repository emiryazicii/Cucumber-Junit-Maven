Today's schedule:
- Tell me about your framework?
- Review
- Practices
--------------------------------------------------
CUCUMBER SCHEDULE
#1- dryRun
#2- tags
#3- html reports
#4- Background
#5- Hooks
#6- Parameterization
 - TakesScreenShot
#7- dataTables
#8- scenario outlines
#9- parallel testing
#10- report generation
--------------------------------------------------
- TELL ME ABOUT YOUR FRAMEWORK?
 - Basically they want to hear how did you create and structured
your project, and what did you use in it to make it functional,
reusable, scalable etc.
 - What tools we used in our project?
 - Which programming language we used in our project?
 - Which testing tools we used in our project?
 - Which development approach we choose in our project?
 - What kind of folder structure you created, and why?
--------------------------------------------------
- BACKGROUND VS HOOKS
- BACKGROUND:
- If we have repeating steps in a feature file, we can
group them under "Background:" keyword.
- The steps we put under the "Background" keyword,
will be a "pre-condition" to ALL of the SCENARIOS in the SAME feature
file.
- Background is for the "Business Side"
- HOOKS:
- We can create "pre" & "post" conditions for any
setups, teardowns, creating connections, closing connections, opening
files, closing files etc. using HOOKS from Cucumber library.
- Unlike Background, this is for the "IMPLEMENTAION
SIDE" of the project.
- Also this will effect all of the scenarios in the
project, UNLESS we specifically create "@tags" to address different
situations.
- We can create more than one @Before, @After,
@BeforeStep, @AfterStep methods.
- We can change the running order by using "order = 1"
keyword.
- The smaller the number, the earlier will be
executed.
--------------------------------------------------
PARAMETERIZATION
- Parameterization is being able to pass test data from the feature
files.
- We can pass Java or non-Java data.
- Java: String, int, float, double ...
- Non-java : {word}
- We can even create our own object types to pass them from
feature files.
- Also known as CUCUMBER EXPRESSIONS.
- We can pass more than 1 data in 1 step. We are not limited. It will
just be passed as additional argument in the step_definition method.
--------------------------------------------------
TAKING SCREENSHOT
- How do you take a screenshot using your project?
- I use Scenario class to get certain information from current
scenario; such as name, and condition/status (if passed or failed)
- I downcast my driver type to TakesScreenshot interface and
use method getScreenshotAs to store my screenshot as array of bytes
 - And attach my screenshot into report using scenario class
object and attach method.
SYNTAX:
 if(scenario.isFailed()){
 byte [] screenshot =
((TakesScreenshot)Driver.getDriver()).getScreenshotAs(OutputType.BYTES
);
 scenario.attach(screenshot, "image/png",
scenario.getName());
 }
--------------------------------------------------
CUCUMBER DATA TABLES
- Cucumber Data Tables allows us to pass collections and more under a
step.
- We can pass:
- List<String>
- int
- Maps
- List of Maps
- Map of Maps
- We will accept the data inside of pipes ||, and determine how do we
want to accept that table in the step definitions as an argument.
- If it makes sense, we will accept it as a List<String>
- If it makes sense, we will accept it as a Map<String,
String>
ex:
Scenario: List of fruits and vegetables I like
 Then user should see below list
 | orange |
 | apple |
 | kiwi |
 | strawberry |
 | tomato |
 | pear |
 | eggplant |
SYNTAX --> inside step definitions class:
 @Then("user should see below list")
 public void user_should_see_below_list(List<String>
fruitsAndVegetables) {
 System.out.println("fruitsAndVegetables = " +
fruitsAndVegetables);
 System.out.println(fruitsAndVegetables.get(1));
 }
--------------------------------------------------
SCENARIO OUTLINES / SCENARIO TEMPLATES
- Scenario Outlines we can create a table for the whole scenario
- This table will contain different data sets for different scenario
executions
- Scenario Outlines truly allows us to do DDT using BDD.
- However many lines we have under "Examples" table, will determine
the amount of time that our test will be executed.
- To be able to implement Scenario outline, we have to use "Scenario
Outline" keyword instead of "Scenario"
- Once we use "Scenario Outline" keyword, we have to provide an
"Examples:" table
Scenario Outline: Wikipedia Search Functionality with Scenario Outline
 Given User is on Wikipedia home page
 When User types "<searchValue>" in the wiki search box
 And User clicks wiki search button
 Then User sees "<expectedTitle>" is in the wiki title
 Then User sees "<expectedMainHeader>" is in the main header
 Then User sees "<expectedImageHeader>" is in the image header
 @ceos
 Examples: search values we are going to be using in this scenario
outlines
 | searchValue | expectedTitle | expectedMainHeader | expectedImageHeader |
 | Steve Jobs | Steve Jobs | Steve Jobs | Steve Jobs |
 | Marry Barra | Marry Barra | Marry Barra | Marry Barra |
 | Rosalind Brewer | Rosalind Brewer | Rosalind Brewer | Rosalind Brewer |
 | Sundar Pichai | Sundar Pichai | Sundar Pichai | Sundar Pichai |